- goal: self-hosted compiler
- really hated lisp, but easy
- completely on one
- chose JS host because of similarity to lisp and simplicity
- began with normal JS compiler
- started with tokenizer
- then value parsing and function and names
- then def
- then if/else
- then infix
  little nicety, == goes to ===
- started to transfer over to quidditch
- numerous errors, discover use of (do statement)
- (debug) doesn't work, discover why macros
- stack overflow
(app x (lam (y)
  y))
  several times contributes to stack overflow instead of let
  let statement became essential
  could not parse the tokenizer source
- didn't *need* to use let, def and do did enough!
   several (app) calls down to one new function scope
   reduces # of parentheses, always agood thing
- great feeling to just have tokens working in completely new language
- not really self hosted since it relies a lot on v8, but getting there
- inconvenient error handling (barely none at all)
- worried about converting js objects in original compiler to lisp
- just use list "struct" functions as a standard
- some painful debugging later, compiler!
- cannot test it on actual source - stack overflow
- stack-size=10000
- develop with bootstrapped compiler - keep the existing one, use it on tests
- next step - write a parser to generate a parsed AST 
- first time developing 100% with bootstrapped compiler - actually quite nice
- oh dear! compiler malfunction I didn't catch:
  ((my-call x) z) goes to (z)
  thankfully:
  (do
    (def f (my-call x))
    (f z))
  also forgot !=, >, <, a whole bunch of operators
- stack overflow only for tokens! \0/ maybe TCO?
- when doing sanitization, accidentally turned -1 to 1!
  fix: (- 0 1)
- trying to do module system
- instead of tco, implemented while and set! macros and trampolines
- fear of getting something messed up still strong
- whoops! forgot about export(), was able to fix
- feeling the pain of no stdlib when creating examples, have to copy in certain fns
- to-array arguments does not work in a let or do
- best thing to be able to do trampoline and it works pretty well
  (my-fn my-arg-1 my-arg-2) -> (callT my-fn my-arg-1 my-arg-2)
- took about 10 minutes debugging and 5 minutes to implement in compiler, works flawlessly and simple implementation!